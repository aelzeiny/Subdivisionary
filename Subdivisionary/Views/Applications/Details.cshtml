@using System.Reflection
@using AutoMapper.Internal
@using Subdivisionary.DAL
@using Subdivisionary.Helpers
@using Subdivisionary.Models
@using Subdivisionary.Models.Applications
@using Subdivisionary.Models.Forms
@using Subdivisionary.ViewModels
@model Subdivisionary.ViewModels.EditApplicationViewModel
@{
    ViewBag.Title = "Details";
    Layout = "~/Views/Shared/_BannerLayout.cshtml";
    ViewBag.Banner = Model.Application.DisplayName;
}

@{
    var forms = Model.Application.GetOrderedForms();
    IForm activeForm = null;
    var allSubmitted = Model.Application.AllFormsSubmitted();
}
<div class="row">
    <div class="sidebar col-xs-0 col-md-3">
        <h2>Directory</h2>
        <ul class="nav nav-pills nav-stacked">
            @for (int i = 0; i < forms.Count; i++)
            {
                var form = forms[i];
                string liClass = null;
                if (i == Model.EditId)
                {
                    liClass = "active";
                    activeForm = form;
                }
                var icon = form.IsAssigned ? "fa fa-check" : (form.IsRequired ? "fa fa-times" : "fa fa-minus");
                <li role="presentation" class="@liClass">
                    <a href="@Url.Action( "Details", "Applications", new {id = Model.Application.Id, editId = i}, null)" class="list-group-item">
                        @form.DisplayName
                        <div class="badge">
                            <i class="@icon" aria-hidden="true"></i>
                        </div>
                    </a>
                </li>
            }
            @if (allSubmitted)
            {
                <li role="presentation" class="liClass">
                    <a href="@Url.Action("Review", "Applications", new {id = Model.Application.Id})" class="list-group-item">
                        Review Application
                        <div class="badge">
                            <i class="fa fa-share" aria-hidden="true"></i>
                        </div>
                    </a>
                </li>
            }
            else
            {
                <li role="presentation" class="liClass disabled">
                    <a class="list-group-item">
                        Review Application
                        <div class="badge disabled">
                            <i class="fa fa-share" aria-hidden="true"></i>
                        </div>
                    </a>
                </li>
            }
        </ul>
        <a class="btn btn-primary btn-xs" href="@Url.Action("Share", "Applications", new {id = Model.Application.Id})" role="button" style="float: right;">
            <i class="fa fa-share-alt"></i>
            Invite
        </a>
    </div>
    <div class="partialbar col-xs-12 col-md-9">
        <h2>@forms[Model.EditId].DisplayName</h2>
        @{
            var formEditor = new EditFormViewModel()
            {
                Form = activeForm,
                ApplicationId = Model.Application.Id,
                EditId = Model.EditId
            };
        }
        @Html.Partial("_FormEditor", formEditor)
    </div>
</div>


@section Scripts {
    @if (activeForm is IUploadableFileForm)
    {

        <script type="text/javascript">
            $(document).ready(function() {
                $(".file-loading").each(function () {
                    var up = $(this);
                    console.log(up.data("files"));
                    var files = up.data("files").split(",");
                    var sizes = up.data("sizes").split(",");
                    var types = up.data("types").split(",");
                    var urls = up.data("urls").split(",");
                    var initialConfigs = new Array();
                    if (files[0]) {
                        for (var i = 0; i < files.length; i++) {
                            initialConfigs.push({
                                type: types[i],
                                size: sizes[i],
                                caption: up.data("captions"),
                                url: urls[i]
                            });
                        }
                    } else {
                        files.length = 0;
                    }
                    console.log(initialConfigs);
                    up.fileinput({
                        theme: "fa",
                        showUpload: true,
                        uploadAsync: true,
                        overwriteInitial: false,
                        uploadUrl: up.data("callback"),
                        maxFileSize: up.data("maxFileSize"),
                        maxFileCount: up.data("maxFileCount"),
                        allowedFileExtensions: up.data("extensions").split(","),
                        initialPreview: files,
                        initialPreviewAsData: true,
                        initialPreviewFileType: 'image',
                        initialPreviewConfig: initialConfigs
                    });
                });
            });
        </script>
        @*<script type="text/javascript">
            $(document)
                .ready(function() {
                    @Html.RenderUploadableFileJavascript((IUploadableFileForm) activeForm, Server)

                });
        </script>*@
    }
    @if (activeForm is ICollectionForm)
    {
        @Html.Partial("CollectionEditors/_CollectionFormJavascript", (ICollectionForm) activeForm)
    }
}
